### Pirate Bot ###
# piratebot --help
# https://github.com/SpaceBoo/TPB-scraper
#!/usr/bin/env python3
import requests
from bs4 import BeautifulSoup
import argparse
import subprocess
import re
import json

# parse arguments
parser = argparse.ArgumentParser()
parser.add_argument("--search", "-s", help="Provide a search term for TPB")
parser.add_argument("--top", "-T", help="Get the top 100 torrents from TPB", action="store_true")
parser.add_argument("--transmission", "-t", help="Passes selected results to 'transmission-cli' for direct downloading", action="store_true")
parser.add_argument("--json", "-j", help="print results as json", action="store_true")
parser.add_argument("--print", "-p", help="Print the details for selcted search result(s)", action="store_true")
parser.add_argument("--results", "-r", nargs='+', help="Specify selected results", type=int, default=[1, 2, 3, 4, 5])
parser.add_argument("--range", "-R", nargs=2, help="Specify a range of results", type=int)
args = parser.parse_args()

# specify search results to be dislplayed
if args.range:
    results = []
    for i in range(args.range[0], (args.range[-1] + 1)):
        (results.append(i))
else:
    results = args.results

#Download Webpage and Parse HTML
home_page = "https://thepiratebay.org"
if args.search:
    webpage = (home_page + "/search/" + args.search)    
elif args.top:
    webpage = (home_page + "/top/all")
else:
    search_term = input('search term : ')
    webpage = (home_page + "/search/" + search_term)
page = requests.get(webpage)
soup = BeautifulSoup(page.content, 'html.parser')

#### generate dictionaries of titles, seeders, leachers, ratios, details, dates, users, file_sizes, and magnet links
search_result = 0; titles = {}; seeders = {} ;leachers = {}; ratios = {}; magnets = {}; details = {}; data = {}; dates = {}; users = {}; file_sizes = {}
table = soup.find("table", id="searchResult")
for tr in table.find_all("tr"):
    for td in tr.find_all("td"):
        if td.find(class_="detName"):
            titles[search_result] = ((td.find(class_="detName")).get_text().replace("\n", ""))
            details[search_result] = (td.find(class_="detDesc")).get_text()
           # details = re.findall('(?<=Uploaded\s)[\d\-\s]+|\d{4}|\d{2}\:\d{2}|(?<=Size\s)[\d\.]+|(?<=ULed by\s)\w+$', details[search_result])
           # date[search_result] = (details[0], details[1])
           # file_size[search_result] = (details[2])
           # user[search_result] = (details[3])
            date, file_size, user = details[search_result].split(',')
            dates[search_result] = (date.split()[1] + " " + date.split()[2])
            file_sizes[search_result] = file_size.split()[1]
            users[search_result] = user.split()[2]
            link_order = 1
            tag_order = 1
            #print (tag_order)
            for link in td.find_all("a"):
                if link_order == 2:
                    magnets[search_result] = link.get("href")
                    break
                link_order += 1
        if (td.get("align") == "right"):
            if tag_order == 1:
                seeders[search_result] = float(td.get_text())
            if tag_order == 2:
                leachers[search_result] = float(td.get_text())
            tag_order += 1
    search_result += 1
#ratios    
for result in range(1,search_result): 
    if seeders[result] == 0 or leachers[result] == 0:
        ratios[result] = 0
    else:
        ratios[result] = round((seeders[result])/(leachers[result]), 1)


### define ouput functions
def print_header():
    print ("Index   Seeders Leachers Ratio   Size       User         Date-Uploaded                       Title")
def print_results(results):
    print ("\n")
    for i in results:
        print (i, int(seeders[i]),  int(leachers[i]),  ratios[i], file_size[i] + "G", user[i],  date[i], titles[i], "\n", magnets[i], "\n\n", sep=('\t '))
def transmission(results):
    for i in results:
        subprocess.call(['transmission-cli', (magnets[int(i)])])
def json_output(search_result, results):
    json_data = {i: {'title': titles[i], 'size': file_sizes[i], 'ratio': ratios[i], 'SE': seeders[i], 'LE': leachers[i], 'uploader': users[i], 'date': dates[i]} for i in range(1,search_result)}
    with open('results.json', 'w') as fp:
        json.dump(json_data, fp, indent=4, sort_keys=True)
    print ("results exported to results.json")
def interactive(results):
    print_header()
    for i in (results):  
        print (i, int(seeders[i]),  int(leachers[i]),  ratios[i],file_sizes[i] + "G", users[i], dates[i],  titles[i].replace("\n", ""), sep=('\t '))
    _input = input("issue a command 'print' or 'transmission' followed the media you wish to act upon\nexample : transmission 1 2 3\ncommand  : ").split()
    if _input[0] == "transmission":
        for i in range(1, len(_input)):
            print ("\nuploading" + titles[(int(_input[i]))] + " (index:" + str(_input[i]) + ")  magnet  to transmission\n")
            subprocess.call(['transmission-cli', (magnets[(int(_input[i]))])])
    elif _input[1] == "transmission": # in case the user puts a space at the beginning of the input
        for i in range(2, len(_input)):
            print ("\nuploading" + titles[(int(_input[i]))] + " (index:" + str(_input[i]) + ")  magnet  to transmission\n")
            subprocess.call(['transmission-cli', (magnets[(int(_input[i]))])])
    elif _input[0] == "print":  
        for i in range(1, len(_input)):
            print (titles[(int(_input[i]))], "\n", magnets[(int(_input[i]))], "\n")
    elif _input[1] == "print":  
        for i in range(2, len(_input)):
            print (titles[(int(_input[i]))], "\n", magnets[(int(_input[i]))], "\n")
    
### caller
if args.print:
    print_results(results)
elif args.transmission:
    transmission(results)
elif args.json:
    json_output(search_result)
else: 
    interactive(results)


 

### old code to keep
# current :
    # print (titles[(int(_input[i]))], "\n", magnets[(int(_input[i]))], "\n")
# alternative : 
    #        x = int(_input(i))
    #        print (titles[x], "\n", magnets[x], "\n")
# the current code is shorter, but perhaps more difficult to understand. Should I replace it??? 
#json.dumps(multi, indent = 4, sort_keys = True)
#        print ("success")
#data = {i: {'title': titles[1], 'size' = file_size[i], 'ratio': ratio[i], 'seeders': seeders[i], 'leachers':leachers[i], 'uploader': user[i], 'date':date[i], 'magnet_link': magnets[i]} for i in range(1,6)}
#print (multi)

#def full_ouptput(search_result): 
    #full_output for scripting use
    #with open('json_dump.data.txt, 'w') as outfile:
   # data = {i: {'title': titles[1], 'size' = file_size[i], 'ratio': ratio[i], 'seeders': seeders[i], 'leachers':leachers[1], 'uploader': user[i], 'date':date[i], 'magnet_link': magnets[i]} for i in range(1, search_result)}
   # print (data)
        #json.dump(data, test.data.txt., sort_keys =True, indent = 4, ensure_ascii = False)
